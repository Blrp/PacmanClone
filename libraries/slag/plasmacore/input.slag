#=====================================================================
# input.slag
#
# v3.0-beta7 (2010.03.13)
#
# --------------------------------------------------------------------
#
# Copyright 2010 Plasmaworks LLC
#
#   http://plasmaworks.com/plasmacore
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#   http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, 
# software distributed under the License is distributed on an 
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific 
# language governing permissions and limitations under the License.
#
#=====================================================================

#=====================================================================
# InputListener
#=====================================================================

underlying aspect InputListener
  # Defines the methods of a InputListener that receives input events.
  METHODS
    method on( KeyEvent event ):

    method on( MouseEvent event ):

    method on( AccelerationEvent event ):

    method on( SystemEvent event ):

    overlaying method listen_to( DispatcherType dispatcher ):
      # Instructs this InputListener to listen to the given 
      # dispatcher.
      insertUnderlying
      if (dispatcher instanceOf InputDispatcher)
        dispatcher.(InputDispatcher).input_listeners.add( this )
      endIf

    overlaying method stop_listening_to( DispatcherType dispatcher ):
      # Stops this InputListener from listening to the given 
      # dispatcher.
      insertUnderlying
      if (dispatcher instanceOf InputDispatcher)
        dispatcher.(InputDispatcher).input_listeners.remove( this )
      endIf
endAspect


#=====================================================================
# InputDispatcher
#=====================================================================
underlying aspect InputDispatcher : DispatcherType
  # Defines the methods of an input dispatcher.
  PROPERTIES
    input_listeners(1) : InputListener[]
      # List of key listeners receiving events from this dispatcher.

  METHODS
    method dispatch( KeyEvent event ):
      # Sends the given key event to all registered listeners.
      forEach (i in 0..<input_listeners.count) input_listeners[i].on( event )

    method dispatch( MouseEvent event ):
      # Sends the given mouse event to all registered listeners.
      forEach (i in 0..<input_listeners.count) input_listeners[i].on( event )

    method dispatch( AccelerationEvent event ):
      # Sends the given acceleration event to all registered listeners.
      forEach (i in 0..<input_listeners.count) input_listeners[i].on( event )

    method dispatch( SystemEvent event ):
      # Sends the given system event to all registered listeners.
      forEach (i in 0..<input_listeners.count) input_listeners[i].on( event )

endAspect



#=====================================================================
# KeyEvent
#=====================================================================

compound KeyEvent( Int32 type, Int32 keycode, Char unicode, Int32 modifiers )
  # Contains information about a specific key event.  Override
  # on(KeyEvent) in your Screen subclass to handle key events.
  #
  # Members (read-only):
  #   type
  #     One of: 
  #       KeyEvent.press
  #       KeyEvent.repeat
  #       KeyEvent.release
  #
  #   keycode
  #     The raw keycode of the key pressed - Key.keycode_a,
  #     Key.keycode_0, etc.  Corresponds to SDL keycode values.
  #
  #   unicode
  #     The unicode value of the key pressed - 'A', '0', etc.
  #
  #   modifiers
  #     Flags indicating what key modifiers were pressed at the time
  #     of the key event.  Use the following methods to check
  #     (event is the KeyEvent; the methods are actualy defined
  #     in class KeyEventManager).
  #
  #       event.shift_pressed
  #       event.ctrl_pressed
  #       event.alt_pressed
  #       event.caps_locked

singleton class KeyEventManager
  PROPERTIES
    release = 0 : Int32
    press   = 1 : Int32
    repeat  = 2 : Int32

  METHODS
    method shift_pressed( KeyEvent event ).Logical:
      return (event.modifiers & Key.modifier_shift) != 0

    method ctrl_pressed( KeyEvent event ).Logical:
      return (event.modifiers & Key.modifier_ctrl) != 0

    method alt_pressed( KeyEvent event ).Logical:
      return (event.modifiers & Key.modifier_alt) != 0

    method caps_locked( KeyEvent event ).Logical:
      return (event.modifiers & Key.modifier_caps_lock) != 0

    method to_String( KeyEvent event ).String:
      local StringBuilder buffer()
      which (event.type)
        case release: buffer.print("key release ")
        case press:   buffer.print("key press ")
        case repeat:  buffer.print("key repeat ")
      endWhich
      if (event.unicode >= ' ' and event.unicode <= 126)
        buffer.print( event.unicode )
        buffer.print(' ')
      endIf
      buffer.print('(')
      buffer.print( event.unicode.(Int32) )
      buffer.print(')')
      return buffer.to_String

    method is_press( KeyEvent event, Char unicode=0 ).Logical:
      return (event.type == press and (unicode==0 or event.unicode==unicode))

    method is_release( KeyEvent event, Char unicode=0 ).Logical:
      return (event.type == release and (unicode==0 or event.unicode==unicode))

    method is_repeat( KeyEvent event, Char unicode=0 ).Logical:
      return (event.type == repeat and (unicode==0 or event.unicode==unicode))

    method is_press( KeyEvent event, Int32 keycode=0 ).Logical:
      return (event.type == press and (keycode==0 or event.keycode==keycode))

    method is_release( KeyEvent event, Int32 keycode=0 ).Logical:
      return (event.type == release and (keycode==0 or event.keycode==keycode))

    method is_repeat( KeyEvent event, Int32 keycode=0 ).Logical:
      return (event.type == repeat and (keycode==0 or event.keycode==keycode))
endClass



singleton class Key
  # A collection of key constants.  Compare these with the keycode
  # values in your Key events or use them as indices into the
  # Input.key_state[] table.
  PROPERTIES
    modifier_shift     =   1 : Int32
    modifier_ctrl      =   2 : Int32
    modifier_alt       =   4 : Int32
    modifier_caps_lock =   8 : Int32
    modifier_command   =  16 : Int32
    
    keycode_backspace     =   8 : Int32
    keycode_tab           =   9 : Int32
    keycode_enter         =  13 : Int32
    keycode_pause         =  19 : Int32
    keycode_escape        =  27 : Int32

    keycode_space         =  32 : Int32
    keycode_exclaim       =  33 : Int32
    keycode_quote         =  34 : Int32
    keycode_hash          =  35 : Int32
    keycode_dollar        =  36 : Int32
    keycode_ampersand     =  38 : Int32
    keycode_apostrophe    =  39 : Int32
    keycode_left_paren    =  40 : Int32
    keycode_right_paren   =  41 : Int32
    keycode_asterisk      =  42 : Int32
    keycode_plus          =  43 : Int32
    keycode_comma         =  44 : Int32
    keycode_minus         =  45 : Int32
    keycode_period        =  46 : Int32
    keycode_slash         =  47 : Int32
    keycode_0             =  48 : Int32
    keycode_1             =  49 : Int32
    keycode_2             =  50 : Int32
    keycode_3             =  51 : Int32
    keycode_4             =  52 : Int32
    keycode_5             =  53 : Int32
    keycode_6             =  54 : Int32
    keycode_7             =  55 : Int32
    keycode_8             =  56 : Int32
    keycode_9             =  57 : Int32
    keycode_colon         =  58 : Int32
    keycode_semicolon     =  59 : Int32
    keycode_less          =  60 : Int32
    keycode_equals        =  61 : Int32
    keycode_greater       =  62 : Int32
    keycode_question      =  63 : Int32
    keycode_at            =  64 : Int32
    keycode_left_bracket  =  91 : Int32
    keycode_backslash     =  92 : Int32
    keycode_right_bracket =  93 : Int32
    keycode_circumflex    =  94 : Int32
    keycode_underline     =  95 : Int32
    keycode_grave         =  96 : Int32
    keycode_a             =  97 : Int32
    keycode_b             =  98 : Int32
    keycode_c             =  99 : Int32
    keycode_d             = 100 : Int32
    keycode_e             = 101 : Int32
    keycode_f             = 102 : Int32
    keycode_g             = 103 : Int32
    keycode_h             = 104 : Int32
    keycode_i             = 105 : Int32
    keycode_j             = 106 : Int32
    keycode_k             = 107 : Int32
    keycode_l             = 108 : Int32
    keycode_m             = 109 : Int32
    keycode_n             = 110 : Int32
    keycode_o             = 111 : Int32
    keycode_p             = 112 : Int32
    keycode_q             = 113 : Int32
    keycode_r             = 114 : Int32
    keycode_s             = 115 : Int32
    keycode_t             = 116 : Int32
    keycode_u             = 117 : Int32
    keycode_v             = 118 : Int32
    keycode_w             = 119 : Int32
    keycode_x             = 120 : Int32
    keycode_y             = 121 : Int32
    keycode_z             = 122 : Int32
    keycode_delete        = 127 : Int32
    keycode_numpad_0      = 256 : Int32
    keycode_numpad_1      = 257 : Int32
    keycode_numpad_2      = 258 : Int32
    keycode_numpad_3      = 259 : Int32
    keycode_numpad_4      = 260 : Int32
    keycode_numpad_5      = 261 : Int32
    keycode_numpad_6      = 262 : Int32
    keycode_numpad_7      = 263 : Int32
    keycode_numpad_8      = 264 : Int32
    keycode_numpad_9      = 265 : Int32
    keycode_numpad_period = 266 : Int32
    keycode_numpad_slash  = 267 : Int32
    keycode_numpad_star   = 268 : Int32
    keycode_numpad_minus  = 269 : Int32
    keycode_numpad_plus   = 270 : Int32
    keycode_numpad_enter  = 271 : Int32
    keycode_numpad_equals = 272 : Int32

    keycode_up_arrow      = 273 : Int32
    keycode_down_arrow    = 274 : Int32
    keycode_right_arrow   = 275 : Int32
    keycode_left_arrow    = 276 : Int32
    keycode_insert        = 277 : Int32
    keycode_home          = 278 : Int32
    keycode_end           = 279 : Int32
    keycode_page_up       = 280 : Int32
    keycode_page_down     = 281 : Int32
    keycode_f1            = 282 : Int32
    keycode_f2            = 283 : Int32
    keycode_f3            = 284 : Int32
    keycode_f4            = 285 : Int32
    keycode_f5            = 286 : Int32
    keycode_f6            = 287 : Int32
    keycode_f7            = 288 : Int32
    keycode_f8            = 289 : Int32
    keycode_f9            = 290 : Int32
    keycode_f10           = 291 : Int32
    keycode_f11           = 292 : Int32
    keycode_f12           = 293 : Int32
    keycode_f13           = 294 : Int32
    keycode_f14           = 295 : Int32
    keycode_f15           = 296 : Int32
    keycode_num_lock      = 300 : Int32
    keycode_caps_lock     = 301 : Int32
    keycode_scroll        = 302 : Int32
    keycode_right_shift   = 303 : Int32
    keycode_left_shift    = 304 : Int32
    keycode_right_ctrl    = 305 : Int32
    keycode_left_ctrl     = 306 : Int32
    keycode_right_alt     = 307 : Int32
    keycode_left_alt      = 308 : Int32
    keycode_right_win     = 309 : Int32
    keycode_right_meta    = 309 : Int32
    keycode_right_command = 309 : Int32
    keycode_left_win      = 310 : Int32
    keycode_left_meta     = 310 : Int32
    keycode_left_command  = 310 : Int32
    keycode_sys_request   = 317 : Int32

    keycode_first_printable = keycode_space         : Int32
    keycode_last_printable  = keycode_numpad_equals : Int32

    keycode_to_unicode_lc =
      Char{
        0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15, 
       16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31, 
       32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47, 
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',  58,  59,  60,  61,  62,  63, 
       64,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 
      112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,  91,  92,  93,  94,  95, 
       96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 
      112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 
      128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 154, 139, 156, 141, 158, 143, 
      144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 255, 
      160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
      176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 
      224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 
      240, 241, 242, 243, 244, 245, 246, 215, 248, 249, 250, 251, 252, 253, 254, 223, 
      224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 
      240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,  
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '/', '*', '-', '+',  10,   
      '=',   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0
      } : Char[]

  
    keycode_to_unicode_uc = 
      Char{
        0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15, 
       16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
       32,  33,  34,  35,  36,  37,  38, '"',  40,  41,  42, '=', '<', '_', '>', '?', 
      ')', '!', '@', '#', '$', '%', '^', '&', '*', '(',  58, ':',  60, '+',  62,  63, 
       64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79, 
       80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90, '{', '|', '}',  94,  95, 
      '~',  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79, 
       80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90, 123, 124, 125, 126, 127, 
      128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 
      144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 138, 155, 140, 157, 142, 159, 
      160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
      176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 
      192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 
      208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 
      192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 
      208, 209, 210, 211, 212, 213, 214, 247, 216, 217, 218, 219, 220, 221, 222, 159, 
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '/', '*', '-', '+',  10,   
      '=',   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0
      } : Char[]

    unicode_to_keycode : Array<<Char>>

  METHODS
    method init:
      unicode_to_keycode = Array<<Char>>( keycode_to_unicode_lc.count )
      forEach (i of keycode_to_unicode_uc)
        unicode_to_keycode[ keycode_to_unicode_uc[i] ] = i
        unicode_to_keycode[ keycode_to_unicode_lc[i] ] = i
      endForEach

endClass

#=====================================================================
# MouseEvent
#=====================================================================
compound MouseEvent( Int32 type, Int32 mouse_id, Vector2 position, Int32 button )
  # Contains information about a specific mouse event.  Override
  # on(MouseEvent) in your Screen subclass to handle mouse events.
  #
  # Members (read-only):
  #   type
  #     One of: 
  #       MouseEvent.movement
  #       MouseEvent.relative_movement,
  #       MouseEvent.button_press
  #       MouseEvent.button_release,
  #       MouseEvent.wheel_up
  #       MouseEvent.wheel_down, 
  #       MouseEvent.present
  #       MouseEvent.absent
  #
  #   mouse_id
  #     Which mouse is being used.  Normally this will be 1.  For
  #     iPhone, each different simultaneous touch is sent as a
  #     different mouse_id that will remain the same throughout the
  #     duration of the touch.
  #
  #   position
  #     The mouse position at the time of the mouse event.
  #
  #   button
  #     The mouse button that was pressed for appropriate events.
  #

singleton class MouseEventManager
  PROPERTIES
    button_release    = 0 : Int32
    button_press      = 1 : Int32
    relative_movement = 2 : Int32
    movement          = 3 : Int32
    wheel_up          = 4 : Int32
    wheel_down        = 5 : Int32
    present           = 6 : Int32
    absent            = 7 : Int32

  METHODS
    method is_movement( MouseEvent e ).Logical:
      return (e.type == movement)

    method is_relative_movement( MouseEvent e ).Logical:
      return (e.type == relative_movement)

    method is_button_press( MouseEvent e, Int32 which_button=0 ).Logical:
      return (e.type == button_press and (which_button == 0 or e.button == which_button))

    method is_button_release( MouseEvent e, Int32 which_button=0 ).Logical:
      return (e.type == button_release and (which_button == 0 or e.button == which_button))

    method is_wheel_up( MouseEvent e ).Logical:
      return (e.type == wheel_up)

    method is_wheel_down ( MouseEvent e ).Logical:
      return (e.type == wheel_down )

    method is_present( MouseEvent e ).Logical:
      return (e.type == present)

    method is_absent( MouseEvent e ).Logical:
      return (e.type == absent)

endClass


#=====================================================================
# AccelerationEvent
# RollPitchYaw
#=====================================================================
compound AccelerationEvent( Int32 controller_id, Real64 x, Real64 y, Real64 z )
  # Contains information about a specific acceleration event for
  # iPhone, Wii, and other platforms capable of detecting acceleration.  
  # Override on(AccelerationEvent) in your Screen subclass to handle 
  # accleration events.
  #
  # Members (read-only):
  #   controller_id
  #     Which controller is being used.  This will be 1 on the iPhone;
  #     it can be 1..4 on the Wii.
  #
  #   x, y, z
  #     The acceleration on the x, y, and z axes.
  #
  # Methods (defined in class AccelerationEventManager):
  #   orientation().RollPitchYaw
  #     Returns a RollPitchYaw compound (containing roll,pitch,yaw:Radians)
  #     with the orientation of the device assuming that gravity is 
  #     the primary force acting on the device (in other words this
  #     doesn't work if it's being shaken violently).

singleton class AccelerationEventManager
  METHODS
    method orientation( AccelerationEvent e ).RollPitchYaw:
      local var x = e.x
      local var y = e.y
      local var z = e.z
      return RollPitchYaw( Vector2(x,z).radians, Vector2(y,z).radians, Vector2(x,y).radians )

    method to_String( AccelerationEvent e ).String:
      return "#$ ($,$,$)" (e.controller_id,e.x,e.y,e.z)
endClass

compound RollPitchYaw( Radians roll, Radians pitch, Radians yaw )

singleton class RollPitchYawManager
  METHODS
    method to_String( RollPitchYaw orientation ).String:
      return "($,$,$)" (Degrees(orientation.roll),
          Degrees(orientation.pitch),Degrees(orientation.yaw))
endClass


#=====================================================================
# SystemEvent
#=====================================================================
compound SystemEvent( Int32 type )
  # Contains information about a specific system event.  Override
  # on(SystemEvent) in your Screen subclass to handle System events.
  #
  # Members (read-only):
  #   type
  #     One of:
  #       SystemEvent.garbage_collected
  #         Indicates that a garbage collection has just finished.
  #
  #       SystemEvent.resources_loaded
  #         Indicates that all resources have finished loading as a
  #         a consequence of an earlier call to ResourceManager.load().

singleton class SystemEventManager
  PROPERTIES
    garbage_collected = 1  : Int32
      # A garbage collection just happened.

    resources_loaded   = 2 : Int32
      # All ImageLoader (etc.) resources are ready.

  METHODS
    method to_String( SystemEvent e ).String:
      which (e.type)
        case garbage_collected: return "gc"
        case resources_loaded:  return "resources loaded"
        others: return "???"
      endWhich

    method is_garbage_collected( SystemEvent e ).Logical:
      return (e.type == garbage_collected)

    method is_resources_loaded( SystemEvent e ).Logical:
      return (e.type == resources_loaded)
endClass


requisite singleton class Input : InputDispatcher
  # Manages application input.  Depending on your application you may
  # wish to handle input event messages in your Screen subclass
  # (on(MouseEvent) etc.) or use this class to poll the current input
  # state.
  PROPERTIES
    first_repeat_delay_in_ticks = 30 : Int32
      # Internal use.

    next_repeat_delay_in_ticks  =  3 : Int32

    key_modifiers : Int32
      # The set of flags representing which SHIFT, ALT, and CTRL key 
      # modifiers are currently pressed.  Most applications will want
      # to call one of these methods instead:
      #
      #   shift_pressed()
      #   ctrl_pressed()
      #   alt_pressed()
      #   caps_locked()

    key_state = Array<<Logical>>(512)  : Array<<Logical>>
      # "true" if the given raw keycode (e.g. Key.keycode_a) is
      # currently pressed, "false" if not.

    last_key_pressed          : Int32
      # Internal use - used for key repeating.

    key_repeat_delay_in_ticks : Int32
      # Internal use - a countdown until a pressed key repeats.

    mouse_present=true  : Logical
      # "true" if this application has the mouse focus.

    mouse_positions(11) : Array<<Vector2>>

    mouse_button_state=Array<<Logical>>(11) : Array<<Logical>>
      # mouse_button_state[i] (where i is 1 to 10) is "true" if
      # that mouse button is currently pressed.

    has_acceleration : Logical

    acceleration_x, acceleration_y, acceleration_z : Real64

  METHODS
    method init:
      has_acceleration = (System.os == "iphone" or System.os == "android")

    method mouse_position( Int32 index=1 ).Vector2:
      return mouse_positions[index]

    method shift_pressed.Logical:
      # Returns "true" if either of the shift keys is currently pressed.
      return (key_modifiers & Key.modifier_shift) != 0

    method caps_locked.Logical:
      # Returns "true" if CAPS LOCK is on.
      return (key_modifiers & Key.modifier_caps_lock) != 0

    method ctrl_pressed.Logical:
      # Returns "true" if either of the control keys is currently
      # pressed.
      return (key_modifiers & Key.modifier_ctrl) != 0

    method alt_pressed.Logical:
      # Returns "true" if either of the alt keys is currently
      # pressed.
      return (key_modifiers & Key.modifier_alt) != 0

    method command_pressed.Logical:
      # Returns "true" if either of the Mac command keys is currently pressed.
      return (key_modifiers & Key.modifier_command) != 0

    method update:
      if (has_acceleration) dispatch( AccelerationEvent(1,acceleration_x,acceleration_y,acceleration_z) )

      # Internal use - updates the input system.
      if (last_key_pressed > 0)
        key_repeat_delay_in_ticks--
        if (key_repeat_delay_in_ticks <= 0)
          dispatch( KeyEvent(repeat, last_key_pressed, keycode_to_Char(last_key_pressed), key_modifiers) )
          key_repeat_delay_in_ticks = next_repeat_delay_in_ticks
        endIf
      endIf

    method keycode_to_Char( Int32 keycode ).Char:
      # Converts the given keycode into its Unicode equivalent, taking
      # the current shift keys into consideration.

      # test special cases in the midst of the printable char range
      if (keycode == Key.keycode_delete) return Char(0)
      if (keycode == Key.keycode_numpad_enter) return Char(0)

      if (keycode >= Key.keycode_first_printable and keycode <= Key.keycode_last_printable)
        if (shift_pressed ~ caps_locked) 
          return Key.keycode_to_unicode_uc[ keycode ]
        else
          return Key.keycode_to_unicode_lc[ keycode ]
        endIf
      endIf

      return Char(0)

    method handle_key_press( Char ch, Int32 code ):
      key_state[code]  = true
      last_key_pressed = code
      key_repeat_delay_in_ticks = first_repeat_delay_in_ticks

      if (ch == 0) 
        which (code)
          case Key.keycode_left_shift:    key_modifiers |= Key.modifier_shift
          case Key.keycode_right_shift:   key_modifiers |= Key.modifier_shift
          case Key.keycode_left_ctrl:     key_modifiers |= Key.modifier_ctrl
          case Key.keycode_right_ctrl:    key_modifiers |= Key.modifier_ctrl
          case Key.keycode_left_alt:      key_modifiers |= Key.modifier_alt
          case Key.keycode_right_alt:     key_modifiers |= Key.modifier_alt
          case Key.keycode_caps_lock:     key_modifiers |= Key.modifier_caps_lock
          case Key.keycode_left_command:  key_modifiers |= Key.modifier_command
          case Key.keycode_right_command: key_modifiers |= Key.modifier_command
        endWhich
      endIf

      if (code == Key.keycode_enter and alt_pressed)
        # ALT+ENTER toggles fullscreen
        key_state[code]  = false
        last_key_pressed = 0
        Display.on_toggle_fullscreen
      elseIf (code == Key.keycode_f4 and alt_pressed)
        # ALT+F4 exits app (compatible with Windows)
        key_state[code]  = false
        last_key_pressed = 0
        Application.on_exit_request
      elseIf (code == Key.keycode_q and 
        key_state[Key.keycode_left_command] or key_state[Key.keycode_right_command])
        # COMMAND+Q also exits app (compatible with Mac)
        key_state[code]  = false
        last_key_pressed = 0
        Application.on_exit_request
      else
        dispatch( KeyEvent(press, code, ch, key_modifiers) )
        dispatch( KeyEvent(repeat, code, ch, key_modifiers) )
      endIf

    method handle_key_release( Char ch, Int32 code ):
      key_state[code] = false
      if (code == last_key_pressed) last_key_pressed = 0

      if (ch == 0) 
        which (code)
          case Key.keycode_left_shift:
            if (not key_state[Key.keycode_right_shift]) key_modifiers &= !Key.modifier_shift
          case Key.keycode_right_shift:
            if (not key_state[Key.keycode_left_shift]) key_modifiers &= !Key.modifier_shift
          case Key.keycode_left_ctrl:
            if (not key_state[Key.keycode_right_ctrl]) key_modifiers &= !Key.modifier_ctrl
          case Key.keycode_right_ctrl:
            if (not key_state[Key.keycode_left_ctrl]) key_modifiers &= !Key.modifier_ctrl
          case Key.keycode_left_alt:
            if (not key_state[Key.keycode_right_alt]) key_modifiers &= !Key.modifier_alt
          case Key.keycode_right_alt:
            if (not key_state[Key.keycode_left_alt]) key_modifiers &= !Key.modifier_alt
          case Key.keycode_caps_lock:
            key_modifiers &= !Key.modifier_caps_lock
          case Key.keycode_left_command:
            if (not key_state[Key.keycode_right_command]) key_modifiers &= !Key.modifier_command
          case Key.keycode_right_command:
            if (not key_state[Key.keycode_left_command]) key_modifiers &= !Key.modifier_command
        endWhich
      endIf

      # Internal use.
      if (code == Key.keycode_enter and alt_pressed)
        # ALT+ENTER finishing
      elseIf (code == Key.keycode_f4 and alt_pressed)
        # ALT+F4 finishing
      else
        dispatch( KeyEvent(release, code, ch, key_modifiers) )
      endIf

    requisite method handle_event( Int32 type, Int32 id, Int32 i, Real64 x, Real64 y ):
      # Internal use - called by the native layer to relay input 
      # events.
      #{
      try
        which (type)
          case NativeEvent.key_press:

          case NativeEvent.key_release:

          #case NativeEvent.mouse_move_relative:

          case NativeEvent.mouse_move_absolute:
            local var pos = Vector2(x,y)
            dispatch( MouseEvent(movement,id,pos,0) )

          case NativeEvent.mouse_button_press:
            mouse_button_state[i] = true
            dispatch( MouseEvent(button_press,id,Vector2(x,y),i) )

          case NativeEvent.mouse_button_release:
            mouse_button_state[i] = false
            dispatch( MouseEvent(button_release,id,Vector2(x,y),i) )

          #case NativeEvent.mouse_wheel:
          #case NativeEvent.mouse_presence:
#{
          case NativeEvent.joystick_axis:

            forEach (view in views)
              view.on( JoystickEvent(movement,id,i,x) )
            endForEach

          case NativeEvent.trackball_axis:
            local Int32 a = i
            local Int32 joystick = a.right_shifted(8)
            local Int32 index = a & 255
            local Int32 b = y
            dispatch_trackball_movement( JoystickEvent(joystick,index,x,y) )

          case NativeEvent.joystick_button_press:
            dispatch_joystick_button_press( JoystickEvent(i,x,0,0) )

          case NativeEvent.joystick_button_release:
            dispatch_joystick_button_release( JoystickEvent(i,x,0,0) )

          case NativeEvent.joystick_hat:
            local Int32 a = i
            local Int32 joystick = a.right_shifted(8)
            local Int32 index = a & 255
            dispatch_joystick_hat_movement( JoystickEvent(joystick,index,x,0) )

          case NativeEvent.joystick_connected:
            local Int32 joystick = i
            local Int32 status = x
            if (status == 1.0) joystick_connected[joystick] = true
            else               joystick_connected[joystick] = false
            dispatch_joystick_connected( JoystickEvent(joystick,0,status,0) )

}#
          case NativeEvent.app_active:
            if (id == 0) EventManager.on( SystemEvent(suspend) )
            else         EventManager.on( SystemEvent(resume) )

          case NativeEvent.menu_option:
            Application.on_menu_option(id,menu_options[id])

        endWhich

      catch (Error err)
        trace( err.to_String )
      endTry
      }#

    method keyboard_visible( Logical setting ): native
      # Shows or hides the on-screen keyboard (iPhone and Android).

    method keyboard_visible.Logical: native

    method input_capture( Logical setting ): native
      # Property-set that specifies whether input is captured by
      # (and restricted to) this application.  This is "false" by 
      # default.
      #
      # Example:
      #   Application.input_capture = true

    method mouse_visible( Logical setting ): native
      # Property-set that specifies the visibility of the system 
      # mouse.  This is "true" by default.
      #
      # Example:
      #   Application.mouse_visible = false


endClass

